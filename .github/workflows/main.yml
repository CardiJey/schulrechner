name: Build Electron App (Flatpak) and Cordova APK

on:
  push:
    tags:
      - 'v*'  # This will trigger the workflow for any version tag like v1.0.0, v2.1.3, etc.
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history is fetched
          fetch-tags: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install

      - name: Update XML Version
        run: npm run update_version

      - name: Extract Changelog
        run: git log $(git describe --tags --abbrev=0 `git rev-list --tags --skip=1 --max-count=1`)..HEAD --pretty=format:"- %s" > www/changelog.txt

      - name: Install Flatpak and required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder xdg-utils libglib2.0-dev libnss3

      - name: Set up Flatpak and install Electron runtime
        run: |
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak update -y
          flatpak install --user -y flathub org.freedesktop.Platform//24.08 org.freedesktop.Sdk//24.08

      - name: Build Electron app as Flatpak
        run: npx electron-builder --linux flatpak

      - name: Upload Flatpak artifact
        uses: actions/upload-artifact@v4
        with:
          name: schulrechner-flatpak
          path: dist/*.flatpak

      # === Android Cordova Build ===

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Cordova
        run: npm install -g cordova

      - name: Prepare and build Cordova project
        run: |
          cordova platform add android
          cordova build android --release "--" --packageType=apk

      - name: Decode Keystore from secret
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > schulrechner.jks

      - name: Find latest Build Tools version
        id: buildtools
        run: |
          LATEST=$(ls -v "$ANDROID_HOME/build-tools" | tail -n 1)
          echo "version=$LATEST" >> $GITHUB_OUTPUT

      - name: Sign the APK with apksigner
        run: |
          BUILD_TOOLS_VERSION=${{ steps.buildtools.outputs.version }}
      
          $ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/zipalign -v 4 \
            platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk \
            platforms/android/app/build/outputs/apk/release/app-release-aligned.apk
      
          $ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/apksigner sign \
            --ks schulrechner.jks \
            --ks-key-alias ${{ secrets.KEY_ALIAS }} \
            --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
            --key-pass pass:${{ secrets.KEY_PASSWORD }} \
            --out platforms/android/app/build/outputs/apk/release/app-release.apk \
            platforms/android/app/build/outputs/apk/release/app-release-aligned.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: schulrechner-apk
          path: platforms/android/app/build/outputs/apk/release/app-release.apk

      - name: Upload Release Assets
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.flatpak
            platforms/android/app/build/outputs/apk/release/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Gradle files to `fdroid-gradle` branch
        run: |
          GRADLE_BRANCH="fdroid-gradle"
          TAG_NAME="${GITHUB_REF##*/}"
          FDROID_TAG="fdroid/$TAG_NAME"

          # Save Gradle files temporarily before switching directories
          mkdir gradle-temp
          cp -r platforms/android/* gradle-temp/

          # Clone target branch or create it if it doesn't exist
          git clone https://github.com/${{ github.repository }} temp-gradle
          cd temp-gradle

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git checkout $GRADLE_BRANCH

          # Clean branch and copy Gradle project files
          git rm -rf . || true
          cp -r ../gradle-temp/* .

          # Commit and tag
          git add .
          git commit -m "Gradle project for F-Droid build of ${TAG_NAME}"
          git tag -f "$FDROID_TAG"

          # Push branch and tag
          git push origin $GRADLE_BRANCH --force
          git push origin "$FDROID_TAG" --force
